br_utils.create_plugin({
	'name' : 'Pipeline Plugin',
	'author' : 'Aaron Hall',
	'description' : 'Pipeline viewer stuff',
	regex_urls : ['pipeline_viewer_config.jsp'],
	/**
	 * @param {DOM} doc The document object of the page that we are testing against
	 * @return {Object} params A hashmap intended to hold information for identifying the page,
	 */
	'get_parameters' : function (doc, jQuery) {
		var params = {};

		params.url = doc.location.href;
		params.title = jQuery("title", doc).html();
		return params;
	},
	/**
	 * @param {Object} params A hashmap, usually generated by get_parameters
	 * @return {Boolean} True if this plugin should be used on this page
	 */
	'matches_page' : function (p) {
		var cond1 = (p['url'] || "").indexOf('pipeline_viewer_config.jsp') > -1;
		var cond2 = (p['title'] || "").indexOf('Pipeline Viewer') > -1;

		return (cond1 && cond2);
	},
	'content' : content_pipeline,
});
/**
 * @param {Object} params A hash map of information about the page
 * @extends BR_Content
 */
function content_pipeline(params) {
	var jQuery = this.jQuery,
	doc = this.doc;
	var me = this;

	/**
	 * content and elements on page
	 */

	this.get_script_type = function () {
		return "content_pipeline";
	};
	this.get_script = function () {
		var textarea = "configXML";

		var ret = jQuery("textarea[name='" + textarea + "']", doc).val();

		return ret;
	};
	/**
	 * File naming and directories -
	 *
	 * These functions are called whenever the plugin
	 * is making a decision about where to save a file
	 */
	this.get_filename = function () {
		return "Pipeline";
	};
	this.get_extension = function () {
		return ".xml";
	};
	this.get_local_directory = function () {
		return "\\";
	};
	/**
	 * Entry points -
	 * These functions are called by the firefox plugin directly
	 */
	//this.on_launch_and_save = function() {	}
	this.pipeline_style = function () {
		this.zebra_striping();
		this.hide_excess_vars(3);
		this.get_var_names();
		this.make_rule_links();
	};
	this.make_notification = function () {
		var url = params['url'] || "";
		var is_prod = br_utils.is_prod_site(url);
		var level = "";
		if (is_prod) {
			level = "prod";
		}
		br_log.page("<div id='br_log_tools_location'/>", level, function () {
			me.add_filter();
		});
	};
	function createFilterMenuItem(filterSelectElement, menuLabel, menuValue) {
		var menuItem = doc.createElement("option");
		menuItem.value = menuValue;
		menuItem.label = menuLabel;
		menuItem.innerHTML = menuLabel;
		filterSelectElement.appendChild(menuItem);
	}
	this.add_filter = function () {
		var filterTypesDropdown = doc.createElement("select");
		filterTypesDropdown.id = "br_pipeline_filter_types";
		jQuery("#br_log_tools_location", doc).append(filterTypesDropdown);
		var types = [];
		jQuery("#tab_rules td:nth-child(2)", doc).each(function (i) {
			var this_html = jQuery(this).html();
			if (types.indexOf(this_html) == -1) {
				types.push(this_html);
				createFilterMenuItem(filterTypesDropdown, this_html, this_html.replace(" ", "_"));
			}
		});
		jQuery("#br_pipeline_filter_types", doc).change(function () {
			var $rules = jQuery("#tab_rules tr.bgcolor-form", doc);
			var filter = jQuery(this).val().replace("_", " ");
			if (filter == "Rule Type") {
				jQuery($rules).show();
			} else {
				jQuery.each($rules, function () {
					var $type = jQuery("td:nth-child(2)", this);
					if ($type.length > 0 && jQuery($type).html().indexOf(filter) > -1) {
						jQuery(this).show();
					} else {
						jQuery(this).hide();
					}
				});
			}
		});
	};
	this.after_page_load = function () {
		//AH fixes issue with sangfroid toggle
		if (br_global.sangfroid_active) {
			this.initiate_display();
			this.pipeline_style();
		}
		var once = true;
		jQuery("span.tab-text", doc).each(function (i) {
			if (i == 1) {
				jQuery(this).bind("click", function () {
					if (once) {
						me.make_notification();
						once = false;
					}
				});
			}
		});
	};

	this.funcs = function () {}
	//this.read_from_file = function() {  };
	//this.faster = function();
	/**
	 * actions
	 */
	this.get_node_for_read = function () {
		var textarea = "configXML";
		var node = jQuery("textarea[name='" + textarea + "']", doc).get(0);

		return node;
	};

	//this.initiate_display = function() {br_display.create_display_pane()};
	//this.save_script_to_disk = function() {  };
	//this.open_script_in_editor = function() {  };
	this.get_menu = function () {
		var me = this;
		//this.auto_sync(me);

		var m = br_menu(me.doc, me)
			.add_separator("br_editing", "Editor")
			.add_button_with_icon("br_open_temp", "Open in Editor", "Open",
				"chrome://sangfroid/content/img/edit.png", function () {
				me.open_temp_file();
			})
			.add_button_with_icon("br_read_temp", "Read from Editor", "Read",
				"chrome://sangfroid/content/img/restore.png", function () {
				me.read_from_file();
			})
			.add_separator("br_tools", "Tools")
			.add_button_with_icon("br_refresh", "Reload Enhancements", "Reload",
				"chrome://sangfroid/content/img/ajax-loader.png", function () {
				me.make_notification();
			})
			.add_button_with_icon("br_toggle", "Toggle All", "Toggle",
				"chrome://sangfroid/content/img/full.png", function () {
				jQuery(".hidden_excess_vars", doc).toggle('fast');
			});

		return m;
	};

	this.zebra_striping = function () {
		jQuery('tr.bgcolor-form:odd', doc).css("background-color", "gainsboro");
		jQuery('tr.bgcolor-form:even', doc).css("background-color", "white");
	};

	this.hide_excess_vars = function (num) {
		jQuery("td.form-input:nth-child(3),td.form-input:nth-child(4)", doc).each(function (index) {
			var thisHtml = jQuery(this).html();
			if (thisHtml.indexOf("<br>") > -1 && thisHtml.match(/<br>/g).length > num) {
				jQuery(this).wrapInner("<div id='hidden_excess_vars_" + index + "' class='hidden_excess_vars'/>");
				br_display.create_toggle_link("#hidden_excess_vars_" + index, "hide_excess_vars" + index, doc);
			}
		});
		//br_display.create_toggle_link(".hidden_excess_vars", "hide_all_excess_vars", doc, "Toggle All", ".plain-button");
	};

	this.get_var_names = function () {
		var varReg = /variableName="(.+?)"/g;
		var lblReg = /label="(.+?)"/g;
		var varNames = br_utils.regex_capture(varReg, jQuery("textarea[name=configXML]", doc).html());
		var lblNames = br_utils.regex_capture(lblReg, jQuery("textarea[name=configXML]", doc).html());
		var count = 1;
		//get all the tds
		jQuery("div#tab_attributes td.form-label:first-child", doc).each(function (index) {
			//br_log.firebug("count : " + count);
			//br_log.firebug("index : " + lblNames.indexOf(jQuery(this).html()));
			//check if td value is a label name
			//lblIndex = lblNames.indexOf(jQuery(this).html());
			//lblIndex = count;
			//br_log.firebug(varNames[count]);
			//if(lblIndex != -1) {
			if (jQuery(this).html() == lblNames[count]) {
				if (count < varNames.length) {
					//add pulled var name
					jQuery(this).append("<a style='color:" + me.pm.getCharPref("color_text1") + ";background-color:" + me.pm.getCharPref("color_main1") + "'> : " + varNames[count] + "</a>");
				}
				count++;
			}
		});
		//cosmetic change to header
		jQuery("div#tab_attributes td.view-header", doc).each(function (index) {
			if (jQuery(this).html() == "Attribute Name") {
				jQuery(this).append(" : Variable Name");
			}
		});
	};
	this.make_rule_links = function () {
		var $tab_rules = jQuery("div#tab_rules", doc)[0];
		var rule_type = [];
		jQuery("td.form-input:nth-child(2)", $tab_rules).each(function () {
			rule_type.push(jQuery(this).html());
		});
		var rule_loc = [];
		jQuery("td.form-input:nth-child(3)", $tab_rules).each(function () {
			rule_loc.push(jQuery(this).html());
		});
		jQuery("td.form-input:first-child", $tab_rules).each(function (i) {
			var text = jQuery(this).html();
			jQuery(this).html("<a id='sangfroid_rule_link' name='"+text+"' href='#' style='color:" + me.pm.getCharPref("color_text1") + ";background-color:" + me.pm.getCharPref("color_main1") + "'>" + text + " " + rule_type[i] + " " + rule_loc[i] + "</a>");
			jQuery("#sangfroid_rule_link[name='"+text+"']",doc).click(function () {
				var this_rule_type = "";
				var this_ref_id = "";
				var this_ref_type = "";
				switch (rule_type[i]) {
				case 'Recommendation':
					this_rule_type = "1";
					break;
				case 'Constraint':
					this_rule_type = "2";
					break;
				case 'Bill of Material':
					this_rule_type = "3";
					break;
				case 'Pricing':
					this_rule_type = "4";
					break;
				case 'Recommended Items':
					this_rule_type = "9";
					break;
				case 'Hiding Attribute':
					this_rule_type = "11";
					break;
				}
				switch (rule_loc[i]) {
				case 'All Product Family':
					this_ref_id = "4118171"
					this_ref_type = "1";
					break;
				case 'Product Family':
					this_ref_id = jQuery("input[name='bm_cm_segment_id']",doc).val();
					this_ref_type = "2";
					break;
				case 'Product Line':
					this_ref_id = jQuery("input[name='pline_id']",doc).val();
					this_ref_type = "3";
					break;
				case 'Model':
					this_ref_id = jQuery("input[name='ref_id']",doc).val();
					this_ref_type = "4";
					break;
				}
				var this_url = me.get_hostname_prefix() + "/admin/configuration/rules/list_rules.jsp?rule_type="+this_rule_type+"&ref_type="+this_ref_type+"&ref_id="+this_ref_id;
				jQuery.get(this_url, function(resp){
					var resp_doc = jQuery(resp,doc);
					jQuery("a.list-field",resp_doc).each(function(){
						if(jQuery(this).html() == text){
							gBrowser.selectedTab = gBrowser.addTab(this.href);
						}
					});
				});
			});
		});
	};
}
content_pipeline.prototype = new BR_Content();
