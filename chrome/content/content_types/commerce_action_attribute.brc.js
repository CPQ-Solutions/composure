BR_Utils.create_plugin ({	
'name':'Filter And Search',
'author':'Michael Wheeler,Dylan Conley, Kenny Browne, Aaron Hall, Stephen Conover',
'description':'Functionality for edit attribute and action page',
regex_urls: ['admin\/commerce\/actions\/edit_action.jsp',
             'admin\/commerce\/attributes\/edit_attribute.jsp'],
/**
 * @param {DOM} doc The document object of the page that we are testing against
 * @return {Object} params A hashmap intended to hold information for identifying the page,
 */
'get_parameters':function(doc) {
	var params = {};
	params.url = doc.location.href;
	return params;
},
/**
 * @param {Object} params A hashmap, usually generated by get_parameters
 * @return {Boolean} True if this plugin should be used on this page
 */
'matches_page':function(p) {
	return (true);
},
'content': commerce_action_attribute,
});
/**
 * @param {Object} params A hash map of information about the page
 * @extends BR_Content
 */
function commerce_action_attribute(params) {
	var IwantItbroken = false;
	this.faster = function(){IwantItbroken = true;}
	var that = this;
	var page=0;
	var indices = [];
	var scrollSpecial=true;
	/**
	 * content and elements on page
	 */	
	this.get_script_type = function() {return "commerce_action_attribute";};
	/**
	 * File naming and directories -
	 * 
	 * These functions are called whenever the plugin 
	 * is making a decision about where to save a file
	 */
	this.get_filename = function() {};
	this.get_extension = function() {};
	this.get_local_directory = function() {};
	this.plugin_created_successfully = function() {
		if(jQuery("#paginateAttributes", doc).length > 0) {
		  return true;
		}
		return false;
	}
	/**
	 * Entry points - 
	 * These functions are called by the firefox plugin directly
	 */
	this.on_launch_and_save = function() { //don't do anything
	}
	
	/**
	 * Sets the Window scroll action and moves down chain to hideElements
	 */
	 
	this.after_page_load = function() {
		var that = this;
		var once = true;
		that.initiate_display();
		//this.load_enhancements();
		jQuery("#tabmodify,#tabinitialize",doc).bind("click",function(){
			if(once){
				that.load_enhancements();
				once = false;
			}
		});
	};
	 
	this.load_enhancements = function() {
		var i=0;
		//AH - I always want things broken
		if(jQuery(".br_tiny",doc).length <= 1/*&& IwantItbroken*/) {
			//convert links pref
			add_action_links();
		}
		that.make_notification();
	};
	this.make_notification = function(){
		var url = params['url']||"";
		var is_prod = br_utils.is_prod_site(url);
		var level = "";
		if(is_prod){
			level = "prod";
		}
		br_log.page("<div id='br_log_tools_location'/>",level,function(){
			that.add_actions();
		});
	};
	this.add_actions = function(){
		jQuery("#br_log_tools_location",doc).prepend("<input type='button' id='color_code_it' value='Color Code It!'/><br/>");
		jQuery("#color_code_it",doc).click(function() {
			that.color_code();
		});
		if(jQuery("#modify",doc).length > 0){
			jQuery("#br_log_tools_location",doc).prepend("<input type='button' id='filter_hidden_att' value='Filter'/>&nbsp;&nbsp;&nbsp;&nbsp;");
			jQuery("#br_log_tools_location",doc).prepend("<select id='attFilter' name='dropdownmenu' size=1 ><option value='All'>All<option value='Define Function'>Define Function<option value='Use Formula'>Use Formula<option value='Use Specified Value'>Use Specified Value<option value='Leave Value Unchanged'>Leave Value Unchanged<option value='Revert to Default'>Revert to Default<option value='Save from Form'>Save from Form</select>");
			//jQuery("#br_log_tools_location",doc).prepend("<input type='button' id='clear_found' value='Clear'/>");
			jQuery("#br_log_tools_location",doc).prepend("<input type='button' id='find_hidden_att' value='Find'/>&nbsp;&nbsp;&nbsp;&nbsp;");
			jQuery("#br_log_tools_location",doc).prepend("<input type='text' id='attSearch' value=''/>");
		}
		if(jQuery("#initialize",doc).length > 0){
			jQuery("#br_log_tools_location",doc).prepend("<input type='button' id='process_filter_hidden_att' value='Filter'/>");
			jQuery("#br_log_tools_location",doc).prepend("<select id='attFilter' name='dropdownmenu' size=1 ><option value='All'>All<option value='Define Function'>Define Function<option value='Use Specified Value'>Use Specified Value<option value='Revert to Default'>Revert to Default<option value='Copy From Original'>Copy From Original</select>");
			//jQuery("#br_log_tools_location",doc).prepend("<input type='button' id='clear_found' value='Clear'/>");
			jQuery("#br_log_tools_location",doc).prepend("<input type='button' id='find_hidden_att' value='Find'/>");
			jQuery("#br_log_tools_location",doc).prepend("<input type='text' id='attSearch' value=''/>");
		}
		jQuery("a[id='back']",doc).parent().parent().parent().parent().parent().parent().parent().css({'background':'white','position':'fixed','bottom':'1%', 'right':'1%'});

		jQuery("#find_hidden_att",doc).click(function() {
			that.findHidden();
		});
		jQuery("#filter_hidden_att",doc).click(function() {
			that.filterHidden();
		});
		jQuery("#process_filter_hidden_att",doc).click(function() {
			that.filterHidden("process");
		});
		/*
		jQuery("#clear_found",doc).click(function() {
			that.clearFound();
		});
		*/
		jQuery(doc).scroll(this.setScrollAction);
	}
	//this.initiate_display = function() {};
	
	this.get_menu = function () {
		var me = this;
		//this.auto_sync(me);

		var m = br_menu(me.doc, me)
			.add_separator("br_tools", "Tools")
			.add_button_with_icon("br_refresh", "Reload Enhancements", "Reload",
				"chrome://sangfroid/content/img/ajax-loader.png", function () {
				me.load_enhancements();
			});
			/* AH - lets always break it
			if(!IwantItbroken){
				m.add_button_with_icon("br_convert", "Convert Links", "Convert",
					"chrome://sangfroid/content/img/html.png", function () {
					add_action_links();
				});
			}*/
		return m;
	};
	
	/* filter */
	
	var getTRTags = function() {
		var trTags = doc.getElementsByTagName("tr");
		var ret_tags = [];

		// build list of tags on "modify" tab
		for(var x=0, xx=trTags.length; x<xx; x++) {
			if(trTags[x].className == "bgcolor-list-odd" || trTags[x].className == "bgcolor-list-even") 
			{
				ret_tags.push(trTags[x]);
			}
		}
		
		//only run the above search once
		getTRTags = function() { return ret_tags; };

		return ret_tags;
	};
	this.removeTabs = function()
	{
		var tabs = doc.getElementsByClassName('page-tabs tab-strip clearfix');
		jQuery(tabs[0],doc).hide();
	};
	this.noButton = function()
	{
		var button = doc.getElementById("attSearch");
		return !button;
	};
	
	this.clearFound = function()
	{
		scrollSpecial=false;
		this.hideElements();
		var trTags = getTRTags();
		var numResults=indices.length;
		doc.getElementById("attSearch").value = "";
		var attName="";
		var resultArr = [];
		var k=0;
		for(i=0;i<numResults;i++)
		{
			var tempAtt=trTags[indices[i]];
			if(tempAtt.children[0].innerHTML.toLowerCase().indexOf(attName.toLowerCase())!==-1)
			{
				resultArr[k]=tempAtt;
				k++;
			}
		}
		var resLen=resultArr.length;
		
		for(i=0;i<resLen;i++)
		{
			jQuery(resultArr[i],doc).show();
			resultArr[i].children[0].style.backgroundColor = '#FFFFFF';
		}
		var xPos=resultArr[0].offsetLeft;
		var yPos=resultArr[0].offsetTop;
		window.content.scrollTo(xPos,yPos);
	};
	this.shouldPopulate = function()
	{
		var position = jQuery(doc).scrollTop();
		alert(position);
		var height = jQuery(doc).height();
		alert(height);
		var hme = height-800;
		alert(hme);
		var pastThresh = ((height-800)>position);
		alert(pastThresh);
		return(scrollSpecial)&&(pastThresh)
	};
	this.findHidden = function()
	{
		scrollSpecial=false;
		this.hideElements();
		var trTags = getTRTags();
		var numResults=indices.length;
		var attName=doc.getElementById("attSearch").value;
		var resultArr = [];
		var k=0;
		for(i=0;i<numResults;i++)
		{
			var tempAtt=trTags[indices[i]];
			if(tempAtt.children[0].innerHTML.toLowerCase().indexOf(attName.toLowerCase())!==-1)
			{
				resultArr[k]=tempAtt;
				k++;
			}
		}
		var resLen=resultArr.length;
		
		for(i=0;i<resLen;i++)
		{
			jQuery(resultArr[i],doc).show();
			//resultArr[i].children[0].style.backgroundColor = '#FFFFFF';
		}
		var xPos=resultArr[0].offsetLeft;
		var yPos=resultArr[0].offsetTop;
		window.content.scrollTo(xPos,yPos);
	};
	
	this.filterHidden = function(type)
	{
		var type = type || "";
		scrollSpecial=false;
		this.hideElements();
		var trTags = getTRTags();
		var numResults=indices.length;    //tr length
		var attName=doc.getElementById("attFilter").value;
		var resultArr = [];
		var k=0;
		var childTD=5;
		if(type == "process"){
			switch (attName)
			{
				case 'Define Function':
					childTD = 1;
					break;
				case 'Use Specified Value':
					childTD = 2;
					break;
				case 'Revert to Default':
					childTD = 3;
					break;
				case 'Copy From Original':
					childTD = 4;
					break;
				case 'All':
					childTD = 7;
					break;
			}
		}
		else
		{
			switch (attName)
			{
				case 'Define Function':
					childTD = 1;
					break;
				//MX add Use Formula td
				case 'Use Formula':
					childTD = 2;
					break;
				case 'Use Specified Value':
					childTD = 3;
					break;
				case 'Leave Value Unchanged':
					childTD = 4;
					break;
				case 'Revert to Default':
					childTD = 5;
					break;
				case 'Save from Form':
					childTD = 6;
					break;
				case 'All':
					childTD = 7;
					break;
			}
		}
		if(childTD != 7){
			if(params.url.indexOf("action")!==-1){
				numResults = numResults - 1;
				for(i=0;i<numResults;i++)
				{
					//var tempAtt=trTags[indices[i + 1]];
					var tempAtt=trTags[indices[i]];
					if(tempAtt.children[childTD].innerHTML.indexOf("checked")!==-1)
					{
						resultArr[k]=tempAtt;
						jQuery(resultArr[k],doc).show();
						k++;				
					}
				}
			}else{
				for(i=0;i<numResults;i++)
				{
					var tempAtt=trTags[indices[i]];
					if(tempAtt.children[childTD].innerHTML.indexOf("checked")!==-1)
					{
						resultArr[k]=tempAtt;
						jQuery(resultArr[k],doc).show();
						k++;
					}
				}
			}
		}else{                         //MX add to display all
			var i=0;
			var trTags = getTRTags();
			for(var x=0, xx=trTags.length; x<xx; x++) {
				if(trTags[x].className == "bgcolor-list-odd" || trTags[x].className == "bgcolor-list-even") 
				{
					indices[i]=x;
					jQuery(trTags[x],doc).show();
					i++;
				}
			}
		}
		//MX comment out: jQuery(resultArr[k],doc).show() replace the code here
		//var resLen=resultArr.length;
		//alert(resLen);
		
		/*for(i=0;i<resLen;i++)
		{
			jQuery(resultArr[i],doc).show();
			resultArr[i].children[0].style.backgroundColor = '#FFFFFF';
		}
		var xPos=resultArr[0].offsetLeft;
		var yPos=resultArr[0].offsetTop;
		window.content.scrollTo(xPos,yPos);*/
	};
	
	/**
	 * Hides all attributes then moves down chain to display first 30 elements
	 */
	this.hideElements = function()
	{
		var i=0;
		var trTags = getTRTags();
		for(var x=0, xx=trTags.length; x<xx; x++) {
			if(trTags[x].className == "bgcolor-list-odd" || trTags[x].className == "bgcolor-list-even") 
			{
				indices[i]=x;
				jQuery(trTags[x],doc).hide();
				i++;
			}
		}
		
	};
	
	/* add links to modify tab for actions AND attributes*/
	var add_action_links = function() {
		function get_hostname_prefix() {
			var url = doc.location.href;
			var end = url.indexOf(".com") + 5;
			url = url.substring(0, end);
			return url;
		}
		root = get_hostname_prefix();
		selectedTab = jQuery("input[name^='_selectedDocument']",doc);
		tabName=selectedTab.next("div").parent().attr("id");
		actionName = "save_type_" + tabName;
		selectedTab.siblings("div").children('table').children('tbody').children('tr[class^="bgcolor-list"]:not(:last)').each(function() {
			if(this.className != "list-label"){
				attrName = this.firstElementChild.innerHTML;
				rowVarName = this.lastElementChild.firstElementChild.name;
				attrId = rowVarName.substring(actionName.length)
				//console.log(attrId);
				if(doc.location.href.indexOf("actions")>-1){
					this.firstElementChild.innerHTML = "<a id='link"+rowVarName+"' class='br_tiny' href='" + root + "admin/commerce/attributes/edit_attribute.jsp?id=" + attrId + "'>"+attrName+"</a>";
				}
				else{
					this.firstElementChild.innerHTML = "<a id='link"+rowVarName+"' class='br_tiny' href='" + root + "admin/commerce/actions/edit_action.jsp?id=" + attrId + "'>"+attrName+"</a>";
				}
			}
		});
		jQuery(".br_tiny", doc).css({
				'color' : that.pm.getCharPref("color_text1"),
				'background-color' : that.pm.getCharPref("color_main1")
			});
	};
	
	/* color code it */
	
	this.color_code = function() {
		//find each td list-field
		var trTags = doc.getElementsByTagName("tr");
		var stringtest="test";
		var numtest=0;
		var inputTags = doc.getElementsByTagName("input");
		for(var x in trTags) {
		  if(trTags[x].className == "bgcolor-list-odd" || trTags[x].className == "bgcolor-list-even") {
			inputTags = trTags[x].getElementsByTagName("input");
			for(var y in inputTags) {
			  if(inputTags[y].checked == true){
				numtest+=1;

				//Here is the money statement

				switch(inputTags[y].value) {
				  case "1": trTags[x].style.backgroundColor = '#ffcc00';
				  numtest+=1;
				  break;
				  case "2": trTags[x].style.backgroundColor = '#ddd';
				  numtest+=1;
				  break;
				  case "3": trTags[x].style.backgroundColor = '#99CCFF';
				  numtest+=1;
				  break;
				  case "4": trTags[x].style.backgroundColor = '#F00';
				  numtest+=1;
				  break;
				  case "5": trTags[x].style.backgroundColor = '#F4D15A';
				  numtest+=1;
				  break;
				  //AH - update for formulas
				  case "6": trTags[x].style.backgroundColor = '#66FF99';
				  numtest+=1;
				  break;
				  default: trTags[x].style.backgroundColor = '#99f';
						   numtest+=1;
						   stringtest= stringtest+"value:"+inputTags[y].value;
						   break;

				}//end money
			  }
			}
		  }
		}	
	};
}
commerce_action_attribute.prototype = new BR_Content();
