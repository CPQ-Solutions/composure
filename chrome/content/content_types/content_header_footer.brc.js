br_utils.create_plugin (function() {
	var props = {	
		'name':'header and footer plugin',
		'author':'Michael Wheeler',
		'description':'Enables version control for the header/footer page in bigmachines',
		regex_urls:['edit_header_footer.jsp'],
		/**
		 * @param {DOM} doc The document object of the page that we are testing against
		 * @return {Object} params A hashmap intended to hold information for identifying the page,
		 */
		'get_parameters':function(doc, jQuery) {
			var params = {};
			
			params.url = doc.location.href;
			params.title = jQuery("title", doc).html();
			
			return params;
		},
		/**
		 * @param {Object} params A hashmap, usually generated by get_parameters
		 * @return {Boolean} True if this plugin should be used on this page
		 */
		'matches_page':function(p) {
			var cond1 = (p['url']||"").indexOf('edit_header_footer.jsp') > -1;
			var cond2 = (p['title']||"").indexOf('Header') > -1;
			var cond3 = (p['title']||"").indexOf('Footer') > -1;
			
			return (cond1 && cond2 && cond3);
		},
		'content': content_header_footer
	};
	/**
	 * @param {Object} params A hash map of information about the page
	 * @extends BR_Content
	 */
	function content_header_footer(params) {
		var jQuery = this.jQuery, doc = this.doc;
		/**
		 * content and elements on page
		 */
		
		this.get_script_type = function() {return "content_header_footer";};
		this.get_script = function() {
			var textarea = jQuery("#br_header_footer",doc).attr("value");
			var ret = jQuery("textarea[name='"+textarea+"']",doc).val();

			return ret;
		};
		/**
		 * File naming and directories -
		 * 
		 * These functions are called whenever the plugin 
		 * is making a decision about where to save a file
		 */
		this.get_filename = function() {
			return jQuery("#br_header_footer",doc).val();
		};
		this.get_extension = function() {
			return ".js";
		};
		this.get_local_directory = function() {
			return "";
		};
		/**
		 * Entry points - 
		 * These functions are called by the firefox plugin directly
		 */
		//this.on_launch_and_save = function() {	}
		this.on_page_load = function() { 		
			var css, html;
			this.initiate_display();

			if(typeof FormData !== "function") {return;}
			css = br_load.css("resource://br_templates/ajax-button.css", function(tag) {
				jQuery("head",doc).append(tag);
			});
			html = br_load.template("resource://br_templates/ajax-button.html", function(temp) {
				jQuery("td:last",doc).after(temp());
				jQuery("#br-ajax-button", doc).click(function() {
					var form_tag = jQuery("form[name='bmForm']",doc), form;
					
					jQuery("input[name='formaction']",form_tag).val("generateHeaderFooter");

					form = form_tag.serialize();
					
					br_display.set_loading_image();
					br_load.post(doc.location.href, form, function(data) {
						br_display.unset_loading_image();
						br_log.notify("Done Updating Header/Footer");
					});

					return false;
				});
			});
		};
		//this.read_from_file = function() {  };
		//this.faster = function();
		/**
		 * actions
		 **/
		this.get_node_for_read = function() {
			var textarea = jQuery("#br_header_footer",doc).attr("value");
			var node = jQuery("textarea[name='"+textarea+"']",doc).get(0);
			
			return node;
		}
		this.initiate_display = function() {
			var m = this.get_menu();
			var opts = [ {'value':'header','label':'Header'},
									 {'value':'footer','label':'Footer'} ];
			
			m.add_separator("br_sel_head", "Select File", "br_editing");
			m.add_dropdown("br_header_footer", opts, "br_editing");
			m.render();
		};
	}
	content_header_footer.prototype = new BR_Content();

	return props;
}());
