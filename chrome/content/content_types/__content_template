br_utils.create_plugin ({	
'name':'-pluginname-',
'author':'',
'description':'',
'regex_urls': [],
/**
 * @param {DOM} doc The document object of the page that we are testing against
 * @return {Object} params A hashmap intended to hold information for identifying the page,
 */
'get_parameters':function(doc) {
	var params = {};
	
	//params.url = doc.location.href;
	//params.title = jQuery("title", doc).html();
	
	return params;
},
/**
 * @param {Object} params A hashmap, usually generated by get_parameters
 * @return {Boolean} True if this plugin should be used on this page
 */
'matches_page':function(params) {
	var cond1 = false;
	//var cond2 = (params['title']||"").indexOf('some-value') > -1;

	return (cond1);
},
'content': -pluginname-,
});
/**
 * @param {Object} params A hash map of information about the page
 * @extends BR_Content
 */
function -pluginname-(params) {
	/**
	 * content and elements on page
	 */
	
	this.get_script_type = function() {return "-pluginname-";};
	//this.get_script = function() {return this.search_nodes_for_script() || EMPTY_SCRIPT_STRING;};
	/**
	 * File naming and directories -
	 * 
	 * These functions are called whenever the plugin 
	 * is making a decision about where to save a file
	 */
	this.get_filename = function() {};
	this.get_extension = function() {};
	this.get_local_directory = function() {};
	/**
	 * Entry points - 
	 * These functions are called by the firefox plugin directly
	 */
	//this.plugin_created_successfully() { //put code here to avoid re-running plugin code after the first time }
	//this.on_page_load = function() { this.initiate_display(); };
	//this.faster = function();
	/**
	 * actions
	 */
	//this.initiate_display = function() {br_display.create_display_pane()};
}
-pluginname-.prototype = new BR_Content();
